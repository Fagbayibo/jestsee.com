---
import Analytics from '@vercel/analytics/astro'
import { ViewTransitions } from 'astro:transitions'

import BaseHead, { type Props as HeadProps } from '@/components/BaseHead.astro'
import BottomNavigationBar from '@/components/BottomNavigationBar'
import Footer from '@/components/Footer'

interface Props extends HeadProps {
  class?: string
}

const {
  class: className,
  imageUrl = '/images/og_main.png',
  ...headProps
} = Astro.props
---

<!doctype html>
<html lang='en' class='dark'>
  <head>
    <link rel='sitemap' href='/sitemap-index.xml' />
    <BaseHead imageUrl={imageUrl} {...headProps} />
    <ViewTransitions />
    <slot name='head' />
    <script
      is:inline
      defer
      src='https://cloud.umami.is/script.js'
      data-website-id='171092c9-481f-43cd-865f-97d8b52b886f'></script>
  </head>
  <body class='flex min-h-screen flex-col items-center bg-zinc-950 text-white'>
    <slot name='decorator' />
    <main
      class:list={[
        'w-full max-w-[1200px] px-12 pb-16 tracking-wide transition-all max-sm:px-4',
        className
      ]}
    >
      <slot />
    </main>
    <Footer />
    <BottomNavigationBar client:only='react' transition:persist='navbar' />
    <Analytics />
  </body>
</html>

<script>
  const scrollOptions: ScrollIntoViewOptions = {
    behavior: 'smooth',
    block: 'start'
  }

  document.addEventListener('astro:page-load', () => {
    // handle hash on initial load
    if (window.location.hash) {
      window.scrollTo({ top: 0, behavior: 'instant' })

      const targetId = window.location.hash.substring(1)
      const targetElement = document.getElementById(targetId)
      targetElement?.scrollIntoView(scrollOptions)
    }

    // handle in page navigation
    document.querySelectorAll('a[href^="#"]').forEach((link) => {
      link.addEventListener('click', (event) => {
        event.preventDefault()

        const currentTarget = event.currentTarget as HTMLAnchorElement
        const targetId = currentTarget.getAttribute('href')?.substring(1) // Get ID without '#'

        if (!targetId) return

        const targetElement = document.getElementById(targetId)
        const block = currentTarget.dataset['block'] as ScrollLogicalPosition
        targetElement?.scrollIntoView({ ...scrollOptions, block })

        // Manually update the URL hash without triggering the default jump
        history.pushState(null, '', `#${targetId}`)
      })
    })

    window.addEventListener('hashchange', () => {
      const targetId = window.location.hash.substring(1)
      const targetElement = document.getElementById(targetId)

      targetElement?.scrollIntoView(scrollOptions)
    })
  })
</script>
