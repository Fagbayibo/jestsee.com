---
import type { MarkdownHeading } from 'astro'
import type { InferEntrySchema } from 'astro:content'

import { ArrowOutward } from '@/components/icons/ArrowOutward'
import { ArrowRight } from '@/components/icons/ArrowRight'
import Image from '@/components/Image'
import Link, { LinkArticle } from '@/components/Link'
import TableOfContent from '@/components/TableOfContent'
import TopOverlay from '@/components/TopOverlay.astro'
import ScrollProgressBar from '@/components/ui/scroll-progress-bar'
import { PROJECT_ICONS, type ProjectIcon } from '@/content/_icons'
import { BASE_URL } from '@/lib/baseUrl'
import { formatDateByTimeZone, getTransitionName } from '@/lib/utils'

// import MoreProjectCard from '@/pages/projects/_components/MoreProjectCard.astro'
import BaseLayout from './BaseLayout.astro'

interface Props extends InferEntrySchema<'projects'> {
  headings: MarkdownHeading[]
  slug: string
}

const {
  year,
  description,
  heroImage,
  title,
  headings,
  slug,
  updatedDate,
  latestCommitUrl,
  readingTime,
  links
} = Astro.props

const htmlTitle = title.replace(
  '\\n',
  "<br class='max-md:hidden' /><span class='md:hidden'>&nbsp;</span>"
)
---

<BaseLayout
  title={title.replace('\\n', ' ')}
  imageUrl={`${BASE_URL}/api/og/${slug}`}
  description={description}
  class='!max-w-[1080px]'
>
  <slot name='head' slot='head' />
  <div class='absolute -z-10 overflow-clip' slot='decorator'>
    <Image
      src={heroImage}
      alt='Bookmarked Notion page'
      wrapperProps={{
        class: 'sm:max-h-[640px] w-full'
      }}
      transition:name={getTransitionName(title, 'image')}
    />
  </div>
  <div
    class='fade-divider absolute top-[200px] -z-10 h-[480px] w-full'
    slot='decorator'
  >
  </div>
  <!-- <TopOverlay /> -->
  <!-- <ScrollProgressBar targetId='article' client:only='react' /> -->
  <div class='h-[400px]'></div>
  <section class='font-light sm:mt-4'>
    <h2 class='border-l border-l-zinc-400 px-2 leading-none text-zinc-400'>
      {year}
    </h2>
    <h1
      class='mt-8 font-heading text-[clamp(24px,5vw,44px)] font-medium leading-[1.05] !tracking-[-0.03em]'
      set:html={htmlTitle}
      transition:name={getTransitionName(title, 'title')}
    />
    <h3 class='mt-4 text-zinc-400'>
      {description}
    </h3>

    {
      links.length > 1 && (
        <ul class='mt-8 flex flex-wrap gap-2 sm:gap-4'>
          {links.map(({ icon, url, name }) => {
            const Icon = PROJECT_ICONS[icon as ProjectIcon]
            return (
              <li>
                <Link
                  href={url}
                  target='_blank'
                  class:list={[
                    'flex items-center gap-2 rounded-lg text-sm text-zinc-300 max-sm:text-xs',
                    'border border-zinc-600 px-3 py-2',
                    'bg-gradient-to-t from-zinc-800/50 to-zinc-800/0',
                    'transition-all duration-200 hover:border-zinc-500 hover:from-zinc-800'
                  ]}
                >
                  <Icon className='size-4' /> {name}
                </Link>
              </li>
            )
          })}
        </ul>
      )
    }
  </section>
  <span
    class='my-8 flex h-[1px] w-full bg-gradient-to-r from-zinc-900 via-zinc-800 to-zinc-900'
  ></span>
  <section class='flex w-full gap-16'>
    <article
      id='article'
      class:list={[
        'prose-a:text-primary-gradient prose prose-invert max-w-none max-sm:prose-sm',
        'prose-headings:scroll-m-16 sm:prose-headings:scroll-m-[120px]'
      ]}
    >
      <slot />
      {
        // prettier-ignore
        updatedDate && (
          <p class='mt-8 text-sm text-slate-400/90'>
            Last updated on {formatDateByTimeZone(updatedDate)} UTC+7.
            {latestCommitUrl && 
            <LinkArticle href={latestCommitUrl}>
                See Changelog
                <ArrowOutward className='inline-block size-3 text-[var(--accent-color-2)]' />
              </LinkArticle>}
          </p>
        )
      }
    </article>

    <aside class='w-[220px] shrink-0 space-y-8 max-[880px]:hidden'>
      <TableOfContent
        headings={headings}
        className='sticky top-32 font-thin tracking-normal'
      />
    </aside>
  </section>
  <section class='pt-4'>
    <!-- <div class='mb-12 grid gap-6 max-lg:mx-auto md:grid-cols-2'>
      <MoreProjectCard {...Astro.props} />
      <MoreProjectCard {...Astro.props} />
    </div> -->
    <Link
      href='/projects'
      class='text-sm'
      styled
      hoverStyled
      hoverEffectOffsetStart='24px'
    >
      <ArrowRight
        className='mr-2 inline-block size-4 -scale-x-100 text-[var(--accent-color-1)]'
      />Explore more projects</Link
    >
  </section>
</BaseLayout>

<style is:global>
  .project-heading > a {
    opacity: 0;
    color: var(--accent-color-1);
    transition: all 200ms ease-in-out;
    display: inline-block;
    vertical-align: middle;
    padding-bottom: 4px;
    margin-left: 2px;
  }

  .project-heading:hover > a {
    opacity: 1;
  }

  .fade-divider {
    background: theme(colors.zinc.950);
    background: linear-gradient(
      0deg,
      theme(colors.zinc.950) 50%,
      theme(colors.zinc.950/75%) 70%,
      theme(colors.zinc.950/ 0%) 100%
    );
  }

  article > p a {
    text-decoration: none !important;
    text-underline-offset: 0px !important;
    transition: text-underline-offset 0.15s ease-out;

    &:hover {
      text-decoration: underline !important;
      text-decoration-thickness: 1px !important;
      text-decoration-style: dashed !important;
      text-decoration-color: rgba(255, 255, 255, 0.7) !important;
      text-underline-offset: 5px !important;
    }
  }
</style>

<script>
  const handleHeadingIntersection = () => {
    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: '0px 0px -80% 0px', // Adjust to make the top 20% of the viewport observe entries
      threshold: 0 // Trigger as soon as they enter the viewport
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return

        const id = entry.target.getAttribute('id')
        const link = document.querySelector(`li > a[href="#${id}"]`)
        const textStyle = 'text-zinc-300'

        document
          .querySelectorAll(`.${textStyle}`)
          .forEach((item) => item.classList.remove(textStyle))

        link?.classList.add(textStyle)
      })
    }, observerOptions)

    document.querySelectorAll('h2[id], h3[id], h4[id]').forEach((heading) => {
      observer.observe(heading)
    })
  }

  document.addEventListener('astro:page-load', handleHeadingIntersection)
</script>
