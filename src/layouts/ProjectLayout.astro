---
import type { MarkdownHeading } from 'astro'
import type { InferEntrySchema } from 'astro:content'

import { ArrowOutward } from '@/components/icons/ArrowOutward'
import { Group } from '@/components/icons/Group'
import Image from '@/components/Image'
import Link from '@/components/Link'
import TableOfContent from '@/components/TableOfContent'
import ScrollProgressBar from '@/components/ui/scroll-progress-bar'
import { PROJECT_ICONS, type ProjectIcon } from '@/content/_icons'
import { BASE_URL } from '@/lib/baseUrl'

import BaseLayout from './BaseLayout.astro'

interface Props extends InferEntrySchema<'projects'> {
  headings: MarkdownHeading[]
  slug: string
}

const {
  year,
  description,
  heroImage,
  links,
  numberOfTeamMembers,
  title,
  headings,
  slug
} = Astro.props

const htmlTitle = title.replace(
  '\\n',
  "<br class='max-md:hidden' /><span class='md:hidden'>&nbsp;</span>"
)
---

<BaseLayout
  headProps={{
    title: title.replace('\\n', ' '),
    imageUrl: `${BASE_URL}/api/og/${slug}`,
    description
  }}
  class='space-y-12'
>
  <ScrollProgressBar type='bar' client:only='react' />
  <section class='space-y-5 sm:pt-12'>
    <h2
      class='border-l border-l-gray-300 px-2 leading-tight tracking-wider text-gray-300'
    >
      {year}
    </h2>
    <h1
      class='font-geist text-[clamp(28px,5vw,48px)] font-medium leading-none tracking-tight'
      set:html={htmlTitle}
      transition:name='pls'
    />
    <h3 class='text-slate-400 max-sm:text-sm'>
      {description}
    </h3>
    {
      links.length > 1 && (
        <ul class='flex flex-wrap gap-2 pt-2 sm:gap-4'>
          {links.map(({ icon, url, name }) => {
            const Icon = PROJECT_ICONS[icon as ProjectIcon]
            return (
              <li>
                <Link
                  href={url}
                  target='_blank'
                  class:list={[
                    'flex items-center gap-2 rounded-lg text-sm text-gray-300 max-sm:text-xs',
                    'border border-gray-600 px-3 py-2',
                    'bg-gradient-to-t from-slate-800/50 to-gray-800/0',
                    'transition-all duration-200 hover:border-gray-500 hover:from-slate-800'
                  ]}
                >
                  <Icon className='size-4' /> {name}
                </Link>
              </li>
            )
          })}
        </ul>
      )
    }
  </section>
  <section>
    <Image
      src={heroImage}
      alt='Bookmarked Notion page'
      wrapperClass='max-h-[560px] rounded-lg'
      transition:name='ass'
      ambientMode
    />
  </section>
  <section class='mx-auto flex w-fit gap-16 pt-4'>
    <article
      class:list={[
        'prose prose-slate prose-invert max-sm:prose-sm',
        'prose-headings:font-geist',
        'prose-p:opacity-75',
        'prose-a:underline-offset-2',
        'max-w-[680px]'
      ]}
    >
      <slot />
    </article>

    <aside
      class='sticky top-16 w-[220px] shrink-0 space-y-8 self-start max-lg:hidden'
    >
      <div class='font-geist space-y-2 text-slate-200'>
        <p class='text-lg font-medium'>Project Contributor</p>
        <div class='flex items-center gap-2'>
          <Group className='inline-block' />
          <p class='text-slate-300/80'>Jesica</p>
        </div>
      </div>
      <TableOfContent headings={headings} />
      <Link
        href='https://bookmarked.jestsee.com'
        target='_blank'
        class:list={[
          'flex w-fit items-center gap-2 rounded-full text-sm text-gray-300 max-sm:text-xs',
          'border border-gray-600 px-4 py-2',
          'bg-gradient-to-t from-slate-800/50 to-gray-800/0',
          'transition-all duration-200 hover:border-gray-500 hover:from-slate-800'
        ]}
      >
        Visit Website
        <ArrowOutward className='size-4' />
      </Link>
    </aside>
  </section>
</BaseLayout>

<style is:global>
  h2,
  h3,
  h4 {
    scroll-margin: 4rem;
  }

  .project-heading > a {
    opacity: 0;
    transition: all 200ms ease-in-out;
    display: inline-block;
    vertical-align: middle;
    padding-bottom: 4px;
  }

  .project-heading:hover > a {
    opacity: 1;
  }
</style>

<script>
  const handleHeadingIntersection = () => {
    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: '0px 0px -80% 0px', // Adjust to make the top 20% of the viewport observe entries
      threshold: 0 // Trigger as soon as they enter the viewport
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return

        const id = entry.target.getAttribute('id')
        const link = document.querySelector(`li > a[href="#${id}"]`)
        const textStyle = 'text-slate-300'

        document
          .querySelectorAll(`.${textStyle}`)
          .forEach((item) => item.classList.remove(textStyle))

        link?.classList.add(textStyle)
      })
    }, observerOptions)

    document.querySelectorAll('h2[id], h3[id], h4[id]').forEach((heading) => {
      observer.observe(heading)
    })
  }

  document.addEventListener('astro:page-load', handleHeadingIntersection)
</script>
