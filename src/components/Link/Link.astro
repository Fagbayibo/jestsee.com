---
interface Props extends astroHTML.JSX.AnchorHTMLAttributes {
  styled?: boolean
  hoverStyled?: boolean
  hoverEffectStartPosition?: number
}

const {
  styled,
  hoverStyled,
  hoverEffectStartPosition,
  class: className,
  ...rest
} = Astro.props
---

<script>
  import { navigate } from 'astro:transitions/client'

  function generateCustomEvent(path: string) {
    return new CustomEvent('local-navigation', {
      bubbles: true,
      detail: { path }
    })
  }

  function eventHandler(event: Event) {
    if (!event.currentTarget) return

    const href = (event.currentTarget as HTMLAnchorElement).href

    if (!href.startsWith(location.origin)) return

    const customEvent = generateCustomEvent(href.replace(location.origin, ''))

    event.currentTarget.dispatchEvent(customEvent)
  }

  let { hash: previousHash, pathname: previousPath } = window.location
  let isNavigating = false

  document.addEventListener('astro:page-load', () => {
    const links = document.querySelectorAll('a.custom-link')
    links.forEach((link) => {
      link.addEventListener('click', eventHandler)
    })

    previousHash = window.location.hash
    previousPath = window.location.pathname
    isNavigating = false
  })

  window.addEventListener('popstate', async () => {
    if (window.location.origin !== location.origin) return

    const currentPath = window.location.pathname
    const currentHash = window.location.hash

    // this is workaround for navigating back to the previous page with hash
    if (!isNavigating && currentPath !== previousPath && currentHash) {
      isNavigating = true
      await navigate(currentPath + currentHash, { history: 'replace' })
    }

    const customEvent = generateCustomEvent(window.location.pathname)

    document.dispatchEvent(customEvent)
  })
</script>

<a
  class:list={[
    'custom-link',
    {
      'text-primary-gradient underline-offset-2 hover:underline': styled,
      'hover-animation': hoverStyled
    },
    className
  ]}
  {...rest}><slot /></a
>

<style define:vars={{ startPosition: `${hoverEffectStartPosition ?? 0}px` }}>
  .hover-animation {
    --dot-color: rgba(255, 255, 255, 0.75);

    position: relative;

    &::before {
      position: absolute;
      content: '';
      left: var(--startPosition, 0);
      bottom: -5px;
      height: 1.25px;
      width: 0;
      background-image: repeating-linear-gradient(
        to right,
        var(--dot-color),
        var(--dot-color) 2px,
        transparent 2px,
        transparent 4px
      );
      transition: all 0.3s ease-in-out;
    }

    &:hover {
      &::before {
        width: calc(100% - var(--startPosition, 0));
      }
    }
  }
</style>
